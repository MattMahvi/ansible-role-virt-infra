---
# Ensure the default storage pool is active (on a fresh KVM box this will not be active by default)
# While starting a VM will enable the pool, this can cause some VMs to fail
# because VMs are started in parallel and multiple VMs will try to start the pool
# This assumes the pool is called default and uses the path specified in vars, /var/lib/libvirt/images by default
- name: List storage pools
  virt_pool:
    command: list_pools
  register: result_pool_list
  become: true
  when:
    - inventory_hostname in groups['kvmhost']

- name: Debug result_pool_list
  debug:
    var: result_pool_list
  when:
    - inventory_hostname in groups['kvmhost']

- name: Get info on storage pools
  virt_pool:
    command: info
  register: result_pool_info
  become: true
  when:
    - inventory_hostname in groups['kvmhost']

- name: "Define storage pool {{ pool_name }}: {{ pool_path }}"
  virt_pool:
    command: define
    name: "{{ pool_name }}"
    # name: default
    xml: '{{ lookup("template", "virt-pool.j2") }}'
  register: result_pool_define
  become: true
  when:
    - inventory_hostname in groups['kvmhost']
    - 'pool_name not in result_pool_list'
    # - '"default" not in result_pool_list'
  ignore_errors: yes

- name: Check for specific error and fail if necessary
  fail:
    msg: "The task failed for an unexpected reason: {{ result_pool_define.msg }}"
  when:
    - inventory_hostname in groups['kvmhost']
    - result_pool_define is defined
    - result_pool_define.failed
    - "'Storage source conflict with pool' not in result_pool_define.msg"
  become: true

# - name: Check for specific error and fail if necessary
#   fail:
#     msg: "The task failed for an unexpected reason: {{ result_pool_define.msg }}"
#   when:
#     - result_pool_define is defined
#     - result_pool_define.failed
#     - "'Storage source conflict with pool' not in result_pool_define.msg"
#   become: true
#   when:
#     - inventory_hostname in groups['kvmhost']

- name: "Build storage pool {{ pool_name }}"
  virt_pool:
    command: build
    name: "{{ pool_name }}"
    # name: default
  become: true
  register: result_pool_build
  when:
    - inventory_hostname in groups['kvmhost']
    - 'pool_name in result_pool_list'
    # - '"default" in result_pool_list'
    - result_pool_info.pools.default.state != 'active'
  ignore_errors: true

- name: "Ensure storage pool is active {{ pool_name }}"
  virt_pool:
    state: "active"
    name: "{{ pool_name }}"
    # name: "default"
  become: true
  register: result_pool_activate
  when:
    - inventory_hostname in groups['kvmhost']
