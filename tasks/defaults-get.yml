---
# Use the KVM host to get defaults for VMs, unless overridden in inventory
- name: Get details of KVM host
  setup:
  when:
    - inventory_hostname in groups['kvmhost']

- name: "Ensure destination directory is clean before sync"
  ansible.builtin.file:
    path: "{{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}"
    state: absent
  when:
    - inventory_hostname in groups['kvmhost']

- name: "Copy SSH keys to remote system for kvmhost group"
  synchronize:
    src: "{{ IVCLOUD_CREDENTIALS_GENERATED_PATH }}/"
    dest: "{{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}/"
    recursive: yes
    delete: yes
  delegate_to: localhost  # Performs the operation on the local host
  when:
    - inventory_hostname in groups['kvmhost']


# Use SSH keys on KVM host to use as defaults for cloud-init
# These are only used if no keys are specified
- name: Find SSH public keys on KVM host for cloud-init if none specified
  find:
    paths: 
      - "{{ ansible_env.HOME }}/.ssh/"
      - "{{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}/.ssh/"
    patterns: '*.pub'
  register: result_ssh_key_list
  changed_when: false
  when:
    - inventory_hostname in groups['kvmhost']
    # - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined

- name: Read public SSH keys on KVM host if none specified
  command: "cat {{ item.path }}"
  register: result_ssh_keys
  with_items: "{{ result_ssh_key_list.files }}"
  changed_when: false
  when:
    - inventory_hostname in groups['kvmhost']
    # - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined

- name: Set SSH keys as KVM host default for cloud-init
  set_fact:
    virt_infra_ssh_keys: "{{ virt_infra_ssh_keys + [ item.stdout ] }}"
  with_items: "{{ result_ssh_keys.results }}"
  when:
    - inventory_hostname in groups['kvmhost']
    - result_ssh_keys.results | length > 0
    # - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined


# If no SSH keys found or specified, we create one, which requires ~/.ssh dir to exist
- name: Ensure SSH dir exists if no SSH keys found or specified
  file:
    path: "{{ ansible_env.HOME }}/.ssh"
    state: directory
  when:
    - inventory_hostname in groups['kvmhost']
    - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined
    - result_ssh_key_list.files | length == 0

- name: Create SSH keypair if none found or specified
  openssh_keypair:
    path: "{{ ansible_env.HOME }}/.ssh/id_{{ virt_infra_ssh_key_type | default('rsa') }}-virt-infra-ansible"
    size: "{{ virt_infra_ssh_key_size }}"
    type: "{{ virt_infra_ssh_key_type }}"
    state: present
  register: result_ssh_key_gen
  when:
    - inventory_hostname in groups['kvmhost']
    - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined
    - result_ssh_key_list.files | length == 0

- name: Set created SSH key as KVM host default for cloud-init
  set_fact:
    virt_infra_ssh_keys: "{{ virt_infra_ssh_keys + [ result_ssh_key_gen.public_key ] }}"
  when:
    - inventory_hostname in groups['kvmhost']
    - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined
    - result_ssh_key_gen.public_key is defined and result_ssh_key_gen.public_key

# Append virt_infra_ssh_keys_add[] to virt_infra_ssh_keys
- name: Add additional SSH keys to KVM host default for cloud-init
  set_fact:
    virt_infra_ssh_keys: "{{ virt_infra_ssh_keys + [ lookup('file', item.public) ] }}"
  with_items: "{{ virt_infra_ssh_keys_add }}"
  when:
    - inventory_hostname in groups['kvmhost']
    - virt_infra_ssh_keys_add is defined
    - virt_infra_ssh_keys_add | length > 0


- name: Debug all key variables
  debug:
    msg: "{{ item.key }}: {{ item.value }}"
  with_dict:
    result_ssh_key_list_files: "{{ result_ssh_key_list.files }}"
    # result_ssh_key_generated_list_files: "{{ result_ssh_key_generated_list.files }}"
    # virt_infra_ssh_key_files: "{{ virt_infra_ssh_priv_key_files }}"
    virt_infra_ssh_keys: "{{ virt_infra_ssh_keys }}"
  when:
    - inventory_hostname in groups['kvmhost']


# Get timezone from KVM host to use as defaults for cloud-init
# This is only used if no timezone is specified
# Unfortunately can't use date from "{{ hostvars[kvmhost].ansible_date_time.tz }}"
# as it's an achronym which can't be resolved to country/city for cloud-init
# Due to Ubuntu Bionic, can't use 'timedatectl -p Timezone --value show'
- name: Get timezone from KVM host for cloud-init
  shell: |
    set -o pipefail
    timedatectl |grep 'Time zone:' |awk '{ print $3 }'
  register: result_timezone
  changed_when: false
  ignore_errors: true
  when:
    - inventory_hostname in groups['kvmhost']
  args:
    executable: /bin/bash

- name: Store timezone from KVM host
  set_fact:
    virt_infra_timezone: "{{ result_timezone.stdout }}"
  when:
    - inventory_hostname in groups['kvmhost']






































































# ---
# # Use the KVM host to get defaults for VMs, unless overridden in inventory
# - name: Get details of KVM host
#   setup:
#   when:
#     - inventory_hostname in groups['kvmhost']

# - name: "Ensure destination directory is clean before sync"
#   ansible.builtin.file:
#     path: "{{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}"
#     state: absent
#   when:
#     - inventory_hostname in groups['kvmhost']

# - name: "Copy SSH keys to remote system for kvmhost group"
#   synchronize:
#     src: "{{ IVCLOUD_CREDENTIALS_GENERATED_PATH }}/"
#     dest: "{{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}/"
#     # dest: "{{ ansible_env.HOME }}/.credentials_generated"
#     recursive: yes
#     delete: yes
#     # rsync_opts:
#     #   - "--exclude=.*"  # Optional: Exclude hidden files if not needed.
#   delegate_to: localhost  # Performs the operation on the local host
#   when:
#     - inventory_hostname in groups['kvmhost']


# # Use SSH keys on KVM host to use as defaults for cloud-init
# # These are only used if no keys are specified
# - name: Find SSH public keys on KVM host for cloud-init if none specified
#   find:
#     paths: 
#       - "{{ ansible_env.HOME }}/.ssh/"
#       - "{{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}/.ssh/"
#     patterns: '*.pub'
#   register: result_ssh_key_list
#   changed_when: false
#   when:
#     - inventory_hostname in groups['kvmhost']
#     # - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined

# - name: Read public SSH keys on KVM host if none specified
#   command: "cat {{ item.path }}"
#   register: result_ssh_keys
#   with_items: "{{ result_ssh_key_list.files }}"
#   changed_when: false
#   when:
#     - inventory_hostname in groups['kvmhost']
#     # - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined

# - name: Set SSH keys as KVM host default for cloud-init
#   set_fact:
#     virt_infra_ssh_keys: "{{ virt_infra_ssh_keys + [ item.stdout ] }}"
#   with_items: "{{ result_ssh_keys.results }}"
#   when:
#     - inventory_hostname in groups['kvmhost']
#     - result_ssh_keys.results | length > 0
#     # - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined

# # - name: Debug IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH
# #   debug:
# #     msg: "FROM: IVCLOUD_CREDENTIALS_GENERATED_PATH: {{ IVCLOUD_CREDENTIALS_GENERATED_PATH }} -- TO: IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH: {{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}"
# #   when:
# #     - inventory_hostname in groups['kvmhost']

# # - name: "Ensure destination directory is clean before sync"
# #   ansible.builtin.file:
# #     path: "{{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}"
# #     state: absent
# #   when:
# #     - inventory_hostname in groups['kvmhost']

# # - name: "Copy SSH keys to remote system for kvmhost group"
# #   synchronize:
# #     src: "{{ IVCLOUD_CREDENTIALS_GENERATED_PATH }}/"
# #     dest: "{{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}/"
# #     # dest: "{{ ansible_env.HOME }}/.credentials_generated"
# #     recursive: yes
# #     delete: yes
# #     # rsync_opts:
# #     #   - "--exclude=.*"  # Optional: Exclude hidden files if not needed.
# #   delegate_to: localhost  # Performs the operation on the local host
# #   when:
# #     - inventory_hostname in groups['kvmhost']

# # - block:
# #     # - name: Check current user and directory permissions
# #     #   command: |
# #     #     echo "User: $(whoami)" && ls -ld "/Users/matt/devel/ivcloud/builds/0/project-0/.credentials_generated/.ssh/"
# #     #   register: user_check1
# #     #   ignore_errors: true

# #     # - name: Check current user and directory permissions
# #     #   command: |
# #     #     echo "User: $(whoami)" && ls -ld "{{IVCLOUD_CREDENTIALS_GENERATED_SSH_PATH}}"
# #     #   register: user_check2
# #     #   ignore_errors: true

# #     # - debug:
# #     #     msg: "user_check1: {{ user_check1 }}  -- user_check2: {{ user_check2 }}"

# #     # - name: List SSH directory contents
# #     #   command: ls -la "{{ IVCLOUD_CREDENTIALS_GENERATED_SSH_PATH }}/"
# #     #   register: ls_output1
# #     #   ignore_errors: yes

# #     # - name: List SSH directory contents
# #     #   command: ls -la "/Users/matt/devel/ivcloud/builds/0/project-0/.credentials_generated/.ssh/"
# #     #   register: ls_output2
# #     #   ignore_errors: yes

# #     # - name: List SSH directory contents
# #     #   command: ls -la /Users/matt/devel/ivcloud/builds/0/project-0/.credentials_generated/.ssh/
# #     #   register: ls_output3
# #     #   ignore_errors: yes

# #     # - name: List SSH directory contents
# #     #   command: "ls -la {{ IVCLOUD_CREDENTIALS_GENERATED_SSH_PATH }}/"
# #     #   register: ls_output4
# #     #   ignore_errors: yes

# #     # - debug:
# #     #     msg: "ls_output1: {{ ls_output1 }}  -- ls_output2: {{ ls_output2 }}  -- ls_output3: {{ ls_output3 }}  -- ls_output4: {{ ls_output4 }}"

# #     - name: SECOND Check current user and directory permissions
# #       shell: |
# #         echo "User: $(whoami)"
# #         echo "ID: $(id)"
# #         echo "PWD: $(pwd)"
# #         echo "IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH -- $IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH"
# #         ls -la "{{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}"
# #       register: shell_check1
# #       ignore_errors: true

# #     # - name: SECOND Check current user and directory permissions
# #     #   shell: |
# #     #     echo "User: $(whoami)"
# #     #     echo "ID: $(id)"
# #     #     echo "PWD: $(pwd)"
# #     #     ls -ld "{{IVCLOUD_CREDENTIALS_GENERATED_SSH_PATH}}" || true
# #     #     ls -la "{{IVCLOUD_CREDENTIALS_GENERATED_SSH_PATH}}" || true
# #     #   register: shell_check2
# #     #   ignore_errors: true

# #     - debug:
# #         msg: "shell_check1: {{ shell_check1 }}"
# #         # msg: "shell_check1: {{ shell_check1 }}  -- shell_check2: {{ shell_check2 }}"

# #   when:
# #     - inventory_hostname in groups['kvmhost']

# # - name: "Find SSH public keys on KVM host for cloud-init if none specified in {{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}"
# #   find:
# #     paths: "{{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}/.ssh"
# #     patterns: '*.pub'
# #   register: result_ssh_key_generated_list
# #   changed_when: false
# #   when:
# #     - inventory_hostname in groups['kvmhost']

# # # - name: "Find SSH private keys on KVM host for cloud-init if none specified in {{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}"
# # #   find:
# # #     paths: "{{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}/.ssh"
# # #     patterns: '*_?!(.pub)$'
# # #   register: result_ssh_private_key_generated_list
# # #   changed_when: false
# # #   when:
# # #     - inventory_hostname in groups['kvmhost']

# # # - name: Set ansible_ssh_private_key_file to the first generated private key found
# # #   set_fact:
# # #     ansible_ssh_private_key_file: "{{ result_ssh_private_key_generated_list.files[0].path }}"
# # #   when:
# # #     - inventory_hostname in groups['kvmhost']
# # #     - result_ssh_private_key_generated_list.files | length > 0

# # # ansible_ssh_private_key_file

# # # - name: "Find SSH public keys on KVM host for cloud-init if none specified in {{ IVCLOUD_CREDENTIALS_GENERATED_SSH_PATH }}"
# # #   find:
# # #     paths: "{{ IVCLOUD_CREDENTIALS_GENERATED_SSH_PATH }}/"
# # #     patterns: '*.pub'
# # #   register: result_ssh_key_generated_list
# # #   changed_when: false
# # #   when:
# # #     - inventory_hostname in groups['kvmhost']
# # #     # - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined

# # - name: "Read public SSH keys on KVM host if none specified in {{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}"
# #   command: "cat {{ item.path }}"
# #   register: result_ssh_keys_generated
# #   with_items: "{{ result_ssh_key_generated_list.files }}"
# #   changed_when: false
# #   when:
# #     - inventory_hostname in groups['kvmhost']
# #     # - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined

# # - name: "Set SSH keys as KVM host default for cloud-init in {{ IVCLOUD_CREDENTIALS_GENERATED_ANSIBLE_PATH }}"
# #   set_fact:
# #     virt_infra_ssh_keys: "{{ virt_infra_ssh_keys + [ item.stdout ] }}"
# #   with_items: "{{ result_ssh_keys_generated.results }}"
# #   when:
# #     - inventory_hostname in groups['kvmhost']
# #     - result_ssh_keys_generated.results | length > 0
# #     # - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined


# # If no SSH keys found or specified, we create one, which requires ~/.ssh dir to exist
# - name: Ensure SSH dir exists if no SSH keys found or specified
#   file:
#     path: "{{ ansible_env.HOME }}/.ssh"
#     state: directory
#   when:
#     - inventory_hostname in groups['kvmhost']
#     - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined
#     - result_ssh_key_list.files | length == 0

# - name: Create SSH keypair if none found or specified
#   openssh_keypair:
#     path: "{{ ansible_env.HOME }}/.ssh/id_{{ virt_infra_ssh_key_type | default('rsa') }}-virt-infra-ansible"
#     size: "{{ virt_infra_ssh_key_size }}"
#     type: "{{ virt_infra_ssh_key_type }}"
#     state: present
#   register: result_ssh_key_gen
#   when:
#     - inventory_hostname in groups['kvmhost']
#     - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined
#     - result_ssh_key_list.files | length == 0

# - name: Set created SSH key as KVM host default for cloud-init
#   set_fact:
#     virt_infra_ssh_keys: "{{ virt_infra_ssh_keys + [ result_ssh_key_gen.public_key ] }}"
#   when:
#     - inventory_hostname in groups['kvmhost']
#     - hostvars[inventory_hostname].virt_infra_ssh_keys is not defined
#     - result_ssh_key_gen.public_key is defined and result_ssh_key_gen.public_key

# # Append virt_infra_ssh_keys_add[] to virt_infra_ssh_keys
# - name: Add additional SSH keys to KVM host default for cloud-init
#   set_fact:
#     virt_infra_ssh_keys: "{{ virt_infra_ssh_keys + [ lookup('file', item.public) ] }}"
#     # virt_infra_ssh_keys: "{{ virt_infra_ssh_keys + [ item.public ] }}"
#     # virt_infra_ssh_priv_key_files: "{{ result_ssh_key_list.files|default([]) + [ item.private ] }}"
#   with_items: "{{ virt_infra_ssh_keys_add }}"
#   when:
#     - inventory_hostname in groups['kvmhost']
#     - virt_infra_ssh_keys_add is defined
#     - virt_infra_ssh_keys_add | length > 0

# # - name: "Set virt_infra_ssh_priv_key_files from result_ssh_key_generated_list.files and result_ssh_key_list.files"
# #   set_fact:
# #     # virt_infra_ssh_key_files: "{{ result_ssh_key_list.files|default([]) }}"
# #     # virt_infra_ssh_priv_key_files: "{{ result_ssh_key_generated_list.files|default({}) | combine(result_ssh_key_list.files|default({})) }}"
# #     # virt_infra_ssh_priv_key_files: "{{ (result_ssh_key_generated_list.files)|default([]) + result_ssh_key_list.files|default([]) }}"
# #   when:
# #     - inventory_hostname in groups['kvmhost']
# #     # - result_ssh_key_generated_list.files | length > 0

# - name: Debug all key variables
#   debug:
#     msg: "{{ item.key }}: {{ item.value }}"
#   with_dict:
#     result_ssh_key_list_files: "{{ result_ssh_key_list.files }}"
#     # result_ssh_key_generated_list_files: "{{ result_ssh_key_generated_list.files }}"
#     # virt_infra_ssh_key_files: "{{ virt_infra_ssh_priv_key_files }}"
#     virt_infra_ssh_keys: "{{ virt_infra_ssh_keys }}"
#   when:
#     - inventory_hostname in groups['kvmhost']

# # - name: Debug virt_infra_ssh_priv_key_files
# #   debug:
# #     var: virt_infra_ssh_priv_key_files
# #   when:
# #     - inventory_hostname in groups['kvmhost']

# # - name: Debug virt_infra_ssh_keys
# #   debug:
# #     var: virt_infra_ssh_keys
# #   when:
# #     - inventory_hostname in groups['kvmhost']

# # fail
# # - fail:
# #     msg: "Die"

# # Get timezone from KVM host to use as defaults for cloud-init
# # This is only used if no timezone is specified
# # Unfortunately can't use date from "{{ hostvars[kvmhost].ansible_date_time.tz }}"
# # as it's an achronym which can't be resolved to country/city for cloud-init
# # Due to Ubuntu Bionic, can't use 'timedatectl -p Timezone --value show'
# - name: Get timezone from KVM host for cloud-init
#   shell: |
#     set -o pipefail
#     timedatectl |grep 'Time zone:' |awk '{ print $3 }'
#   register: result_timezone
#   changed_when: false
#   ignore_errors: true
#   when:
#     - inventory_hostname in groups['kvmhost']
#   args:
#     executable: /bin/bash

# - name: Store timezone from KVM host
#   set_fact:
#     virt_infra_timezone: "{{ result_timezone.stdout }}"
#   when:
#     - inventory_hostname in groups['kvmhost']
